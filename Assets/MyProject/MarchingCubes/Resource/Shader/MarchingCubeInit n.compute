#pragma kernel CSMain

StructuredBuffer<uint> src_instances;

RWStructuredBuffer<float3> dst_mesh_normals;

static const int _32e0 = 1;
static const int _32e1 = 32;
static const int _32e2 = 32 * 32;
static const int _32e3 = 32 * 32 * 32;


cbuffer static_data
{
	float4 cube_vtxs[12];
	// x: near vertex index (ortho1>>0 | ortho2>>8 | slant>>16)
	// y: near vertex offset ortho1 (x>>0 | y>>8 | z>>16)
	// z: near vertex offset ortho2 (x>>0 | y>>8 | z>>16)
	// w: pos(x>>0 | y>>8 | z>>16)
				

	float4 cube_patterns[254][2];
	// [0] : vertex posision index for tringle { x: tri0(i0>>0 | i1>>8 | i2>>16)  y: tri1  z: tri2  w: tri3 }
	// [1] : vertex normal index for vertex { x: (i0>>0 | i1>>8 | i2>>16 | i3>>24)  y: i4|5|6|7  z:i8|9|10|11 }

	static const uint itri_to_ivtx = 0;
	static const uint ivtx_to_inml = 1;

			
	float4 normals[155];	
}

//CBUFFER_START(grid_constant)
//cbuffer grid_constant
//{
	//struct {
	//	float4 position;
	//	uint4 near_id;
	//} grids[512];
//	float4 grids[512][2];
//}
//struct aaa { int i; }
//ConstantBuffer<aaa> a;
float4 grids[512][2];
// [0] : position as float3
// [1] : near grid id
// { x : back>>0 | up>>16  y : left>>0 | current>>16  z : right>>0 | down>>16  w : forward>>0 }
//CBUFFER_END;

static const uint grid_pos = 0;
static const uint grid_near_id = 1;




static const uint4 element_mask_table[] =
{
	{1,0,0,0}, {0,1,0,0}, {0,0,1,0}, {0,0,0,1}
};
			
uint unpack8bit_uint4_to_uint(uint4 packed_uint4, uint element_index, uint packed_index)
{
	const uint iouter = element_index;
	const uint iinner = packed_index << 3;
	const uint element = dot(packed_uint4, element_mask_table[iouter]);
	return element >> iinner & 0xff;
}
uint unpack8bit_uint4_to_uint(uint4 packed_uint4, uint index)
{
	const uint element_index = index >> 2;
	const uint packed_index = index & 0x3;
	return unpack8bit_uint4_to_uint(packed_uint4, element_index, packed_index);
}

uint unpack16bit_uint4_to_uint(uint4 packed_uint4, uint index)
{
	const uint iouter = index >> 1;
	const uint iinner = (index & 1) << 4;
	const uint element = dot(packed_uint4, element_mask_table[iouter]);
	return element >> iinner & 0xffff;
}

uint3 unpack8bits_uint_to_uint3(uint packed3_uint)
{
	return packed3_uint.xxx >> uint3(0, 8, 16) & 0xff;
}
uint3 unpack8bits_uint3_to_uint3(uint3 packed3_uint3, uint element_index)
{
	const uint element = dot(packed3_uint3, element_mask_table[element_index].xyz);
	return unpack8bits_uint_to_uint3(element);
}


// cubeindex { x,y,z: cube inner 3d index  w: grid index }

int3 get_cube_offset_near(uint4 icube, uint ivtx_in_cube, uint ortho_selector)
{
	const uint3 offset_packed = asuint(cube_vtxs[ivtx_in_cube].xyz);
	const int3 offset = (int3)unpack8bits_uint3_to_uint3(offset_packed, ortho_selector) - 1;
	return offset;
}

uint4 get_cubeindex_near(uint4 cubeindex, int3 cube_offset)
{
	const int3 cubeindex_outer = (int3)cubeindex.xyz + cube_offset;

	const int3 outer_offset = cubeindex_outer >> 5;
	const uint grid_near_selector = dot(outer_offset, int3(1, 2, 3)) + 3;
				
	const uint gridindex_current = cubeindex.w;
	const uint4 gridindex_near_packed = asuint(grids[gridindex_current][grid_near_id]);//.near_id);//
	const uint gridindex_near = unpack16bit_uint4_to_uint(gridindex_near_packed, grid_near_selector);

	const uint3 cubeindex_inner = cubeindex_outer & 0x1f;
				
	return uint4(cubeindex_inner, gridindex_near);
}

uint get_cubeid_near(uint4 cubeindex)
{
	const uint3 index = uint3(cubeindex.z * 32 + cubeindex.x, cubeindex.y, cubeindex.w);
	return grid_cubeids[index];

	//const int index = dot(cubeindex, cube_span);
	//return grid_cubeids[index];
}

float3 get_vtx_normal(uint cubeid, uint ivtx_in_cube)
{
	const uint4 inml_packed = asuint(cube_patterns[cubeid][ivtx_to_inml]);
	const uint inml = unpack8bit_uint4_to_uint(inml_packed, ivtx_in_cube);
	return normals[inml];
}

float3 get_vtx_normal_near(uint4 cubeindex_current, uint2 ivtx, uint ortho_selector, out uint4 cubeindex_near)
{
	const int3 offset = get_cube_offset_near(cubeindex_current, ivtx.x, ortho_selector);
	const uint4 cubeindex = get_cubeindex_near(cubeindex_current, offset);

	const uint cubeid = get_cubeid_near(cubeindex);
	const float3 normal = get_vtx_normal(cubeid, ivtx.y);

	cubeindex_near = cubeindex;
	return normal;
}

float3 get_and_caluclate_triangle_to_vertex_normal(uint cubeid_current, uint ivtx_current, uint4 cubeindex_current)
{
	const uint ivtx_near_packed = asuint(cube_vtxs[ivtx_current].x);
	const uint4 ivtx = uint4(unpack8bits_uint_to_uint3(ivtx_near_packed), ivtx_current);

	uint4 cubeindex_near;
	const float3 nm0 = get_vtx_normal(cubeid_current, ivtx.w);
	const float3 nm1 = get_vtx_normal_near(cubeindex_current, ivtx.wx, 1, cubeindex_near);
	const float3 nm2 = get_vtx_normal_near(cubeindex_current, ivtx.wy, 2, cubeindex_near);
	const float3 nm3 = get_vtx_normal_near(cubeindex_near,    ivtx.wz, 1, cubeindex_near);

	return normalize(nm0 + nm1 + nm2 + nm3);
}



[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	
	

}
