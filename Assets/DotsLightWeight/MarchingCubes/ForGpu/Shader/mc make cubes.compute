#pragma kernel CSMain

AppendStructuredBuffer<uint> cube_instances;


//struct grid
//{
//	uint dotxlines[32][32];
//};
//StructuredBuffer<grid> dotgrids;
StructuredBuffer<uint> dotgrids;


struct GridInstruction
{
    float3 position;
    int dynamic_grid_id;
    int static_grid_id[2][4];
};
StructuredBuffer<GridInstruction> grid_instructions;


struct CubeXLineBitwise
{
    //uint _98109810;
    //uint _a921a921;
    //uint _ba32ba32;
    //uint _cb43cb43;
    //uint _dc54dc54;
    //uint _ed65ed65;
    //uint _fe76fe76;
    //uint __f870f87;
    uint cubes[8];
};

// あらかじめ共通段階（キューブ手前）までビット操作しておいたほうが速くなるかも、でも余計なエリアにストアするから、逆効果の可能性もある
//CubeXLineBitwise bitwiseCubesXLine_( uint4 y0z0, uint4 y0z1, uint4 y1z0, uint4 y1z1 )
//CubeXLineBitwise bitwiseCubesXLine_(uint y0z0, uint y0z1, uint y1z0, uint y1z1)
CubeXLineBitwise bitwiseCubesXLine_(uint y0z0, uint y0z1, uint y1z0, uint y1z1)
{
    //CubeXLineBitwise blank;
    //if( !any( y0z0 | y0z1 | y1z0 | y1z1 ) ) return blank;

    // fedcba9876543210fedcba9876543210

    const uint m1100 = 0xcccccccc;//0b_11001100_11001100_11001100_11001100u;
    const uint m0011 = m1100 >> 2;
    // --dc--98--54--10--dc--98--54--10
    // dc--98--54--10--dc--98--54--10--
    // fe--ba--76--32--fe--ba--76--32--
    // --fe--ba--76--32--fe--ba--76--32
    const uint y0_dc985410 = y0z0 & m0011 | ( y0z1 & m0011 ) << 2;
    const uint y0_feba7632 = ( y0z0 & m1100 ) >> 2 | y0z1 & m1100;
    const uint y1_dc985410 = y1z0 & m0011 | ( y1z1 & m0011 ) << 2;
    const uint y1_feba7632 = ( y1z0 & m1100 ) >> 2 | y1z1 & m1100;
    // dcdc989854541010dcdc989854541010
    // fefebaba76763232fefebaba76763232
    // dcdc989854541010dcdc989854541010
    // fefebaba76763232fefebaba76763232

    const uint mf0 = 0xf0f0f0f0u;
    const uint m0f = 0x0f0f0f0fu;
    // ----9898----1010----9898----1010
    // dcdc----5454----dcdc----5454----
    // ----baba----3232----baba----3232
    // fefe----7676----fefe----7676----
    const uint _98109810 = y0_dc985410 & m0f | ( y1_dc985410 & m0f ) << 4;
    const uint _dc54dc54 = ( y0_dc985410 & mf0 ) >> 4 | y1_dc985410 & mf0;
    const uint _ba32ba32 = y0_feba7632 & m0f | ( y1_feba7632 & m0f ) << 4;
    const uint _fe76fe76 = ( y0_feba7632 & mf0 ) >> 4 | y1_feba7632 & mf0;
    // 98989898101010109898989810101010
    // dcdcdcdc54545454dcdcdcdc54545454
    // babababa32323232babababa32323232
    // fefefefe76767676fefefefe76767676

    const uint m55 = 0x55555555u;
    const uint maa = 0xaaaaaaaau;
    const uint _a921a921 = ( _ba32ba32 & m55 ) << 1 | ( _98109810 & maa ) >> 1;
    const uint _cb43cb43 = ( _dc54dc54 & m55 ) << 1 | ( _ba32ba32 & maa ) >> 1;
    const uint _ed65ed65 = ( _fe76fe76 & m55 ) << 1 | ( _dc54dc54 & maa ) >> 1;
    const uint __f870f87 = ( _98109810 >> 8 & 0x555555u ) << 1 | ( _fe76fe76 & maa ) >> 1;
    // a9a9a9a921212121a9a9a9a921212121
    // cbcbcbcb43434343cbcbcbcb43434343
    // edededed65656565edededed65656565
    // -f-f-f-f878787870f0f0f0f87878787

    CubeXLineBitwise res;
    //res._98109810 = _98109810;
    //res._a921a921 = _a921a921;
    //res._ba32ba32 = _ba32ba32;
    //res._cb43cb43 = _cb43cb43;
    //res._dc54dc54 = _dc54dc54;
    //res._ed65ed65 = _ed65ed65;
    //res._fe76fe76 = _fe76fe76;
    //res.__f870f87 = __f870f87;
    res.cubes[0] = _98109810;
    res.cubes[1] = _a921a921;
    res.cubes[2] = _ba32ba32;
    res.cubes[3] = _cb43cb43;
    res.cubes[4] = _dc54dc54;
    res.cubes[5] = _ed65ed65;
    res.cubes[6] = _fe76fe76;
    res.cubes[7] = __f870f87;
    return res;

}

//uint4 bitwiseLastHalfCubeXLine_( uint4 y0z0r, uint4 y0z1r, uint4 y1z0r, uint4 y1z1r )
//{
//    return ( y0z0r & 1 ) << 25 | ( y0z1r & 1 ) << 27 | ( y1z0r & 1 ) << 29 | ( y1z1r & 1 ) << 31;
//}
uint bitwiseLastHalfCubeXLine_( uint y0z0r, uint y0z1r, uint y1z0r, uint y1z1r )
{
    return ( y0z0r & 1 ) << 25 | ( y0z1r & 1 ) << 27 | ( y1z0r & 1 ) << 29 | ( y1z1r & 1 ) << 31;
}


uint toCubeInstance(uint ix, uint iy, uint iz, uint gridId, uint cubeId)
{
    return iz << 26 | iy << 21 | ix << 16 | gridId << 8 | cubeId;
}


int toIndex(int gridid, int iy, int iz)
{
    const int g = gridid * 32 * 32;
    const int z = iz * 32;
    const int y = iy;
    return g + z + y;
}


//[numthreads(1, 32, 32)]
[numthreads(1, 31, 31)]
void CSMain (uint3 id : SV_GroupThreadID, uint3 gid : SV_GroupID)
{

    const int gridid = gid.x;
    const uint y0z0 = dotgrids[toIndex(gridid, id.y + 0, id.z + 0)];
    const uint y0z1 = dotgrids[toIndex(gridid, id.y + 0, id.z + 1)];
    const uint y1z0 = dotgrids[toIndex(gridid, id.y + 1, id.z + 0)];
    const uint y1z1 = dotgrids[toIndex(gridid, id.y + 1, id.z + 1)];

    const CubeXLineBitwise cubes = bitwiseCubesXLine_(y0z0, y0z1, y1z0, y1z1);

    [unroll]
    for (int i = 0; i < 8; i++)
    {
        const uint cubeset = cubes.cubes[i];

        [unroll]
        for (int j = 0; j < 4; j++)
        {
            const int shift = j * 8;
            const uint cube = cubeset >> shift & 0xff;

            if (cube == 0) continue;

            const uint instance = toCubeInstance(shift + i, id.y, id.z, gridid, cube);
            cube_instances.Append(instance);
            
            //const int shift = j * 8;
            //const uint cube = cubes.cubes[i] >> shift & 0xff;
            //const uint instance = toCubeInstance(shift + i, id.y, id.z, gridid, cube);
            //if (cube == 0) cube_instances.Append(instance);
        }
    }

}
